// <auto-generated />
using System;
using GraphicRequestSystem.API.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraphicRequestSystem.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250930175525_SeedSystemSettings")]
    partial class SeedSystemSettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.LabelRequestDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LabelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<string>("MeasurementValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PrintQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductNameEN")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductNameFA")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TechnicalSpecs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("LabelRequestDetails");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lookups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "RequestTypes"
                        });
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.LookupItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LookupId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("LookupItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LookupId = 1,
                            Value = "طراحی لیبل"
                        },
                        new
                        {
                            Id = 2,
                            LookupId = 1,
                            Value = "عکس بسته‌بندی محصولات"
                        },
                        new
                        {
                            Id = 3,
                            LookupId = 1,
                            Value = "پست اینستاگرام"
                        },
                        new
                        {
                            Id = 4,
                            LookupId = 1,
                            Value = "ویدئو تبلیغاتی"
                        },
                        new
                        {
                            Id = 5,
                            LookupId = 1,
                            Value = "محتوا برای سایت"
                        },
                        new
                        {
                            Id = 6,
                            LookupId = 1,
                            Value = "ویرایش فایل"
                        },
                        new
                        {
                            Id = 7,
                            LookupId = 1,
                            Value = "کالای تبلیغاتی"
                        },
                        new
                        {
                            Id = 8,
                            LookupId = 1,
                            Value = "تبلیغات بصری"
                        },
                        new
                        {
                            Id = 9,
                            LookupId = 1,
                            Value = "تبلیغات محیطی"
                        },
                        new
                        {
                            Id = 10,
                            LookupId = 1,
                            Value = "متفرقه"
                        });
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApproverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesignerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.RequestHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewStatus")
                        .HasColumnType("int");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestHistories");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            SettingKey = "MaxNormalRequestsPerDay",
                            SettingValue = "5"
                        },
                        new
                        {
                            Id = 3,
                            SettingKey = "MaxUrgentRequestsPerDay",
                            SettingValue = "2"
                        },
                        new
                        {
                            Id = 4,
                            SettingKey = "OrderableDaysInFuture",
                            SettingValue = "30"
                        });
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.LabelRequestDetail", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.LookupItem", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Lookup", "Lookup")
                        .WithMany()
                        .HasForeignKey("LookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lookup");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Request", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.LookupItem", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.RequestHistory", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });
#pragma warning restore 612, 618
        }
    }
}
