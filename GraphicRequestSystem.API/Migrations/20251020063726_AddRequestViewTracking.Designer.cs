// <auto-generated />
using System;
using GraphicRequestSystem.API.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraphicRequestSystem.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251020063726_AddRequestViewTracking")]
    partial class AddRequestViewTracking
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestHistoryId");

                    b.HasIndex("RequestId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("RequestId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.DesignerNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesignerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DesignerId");

                    b.HasIndex("RequestId", "DesignerId", "IsDeleted");

                    b.ToTable("DesignerNotes");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.EnvironmentalAdDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("AdTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.ToTable("EnvironmentalAdDetails");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.FileEditDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("FileEditDetails");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.InboxView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InboxCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastViewedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "InboxCategory")
                        .IsUnique();

                    b.ToTable("InboxViews");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.InstagramPostDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("InstagramPostDetails");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.LabelRequestDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LabelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<string>("MeasurementValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PrintQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductNameEN")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductNameFA")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TechnicalSpecs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("LabelRequestDetails");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lookups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "RequestTypes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LabelTypes"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MeasurementUnits"
                        },
                        new
                        {
                            Id = 4,
                            Name = "VisualAdTypes"
                        },
                        new
                        {
                            Id = 5,
                            Name = "EnvironmentalAdTypes"
                        },
                        new
                        {
                            Id = 6,
                            Name = "WebsiteContentTypes"
                        });
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.LookupItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LookupId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("LookupItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LookupId = 1,
                            Value = "طراحی لیبل"
                        },
                        new
                        {
                            Id = 2,
                            LookupId = 1,
                            Value = "عکس بسته‌بندی محصولات"
                        },
                        new
                        {
                            Id = 3,
                            LookupId = 1,
                            Value = "پست اینستاگرام"
                        },
                        new
                        {
                            Id = 4,
                            LookupId = 1,
                            Value = "ویدئو تبلیغاتی"
                        },
                        new
                        {
                            Id = 5,
                            LookupId = 1,
                            Value = "محتوا برای سایت"
                        },
                        new
                        {
                            Id = 6,
                            LookupId = 1,
                            Value = "ویرایش فایل"
                        },
                        new
                        {
                            Id = 7,
                            LookupId = 1,
                            Value = "کالای تبلیغاتی"
                        },
                        new
                        {
                            Id = 8,
                            LookupId = 1,
                            Value = "تبلیغات بصری"
                        },
                        new
                        {
                            Id = 9,
                            LookupId = 1,
                            Value = "تبلیغات محیطی"
                        },
                        new
                        {
                            Id = 10,
                            LookupId = 1,
                            Value = "متفرقه"
                        },
                        new
                        {
                            Id = 11,
                            LookupId = 2,
                            Value = "سم"
                        },
                        new
                        {
                            Id = 12,
                            LookupId = 2,
                            Value = "کود"
                        },
                        new
                        {
                            Id = 13,
                            LookupId = 2,
                            Value = "بذر"
                        },
                        new
                        {
                            Id = 14,
                            LookupId = 2,
                            Value = "سایر"
                        },
                        new
                        {
                            Id = 15,
                            LookupId = 3,
                            Value = "عدد"
                        },
                        new
                        {
                            Id = 16,
                            LookupId = 3,
                            Value = "بسته"
                        },
                        new
                        {
                            Id = 17,
                            LookupId = 3,
                            Value = "لیتر"
                        },
                        new
                        {
                            Id = 18,
                            LookupId = 3,
                            Value = "کارتن"
                        },
                        new
                        {
                            Id = 19,
                            LookupId = 3,
                            Value = "کیلوگرم"
                        },
                        new
                        {
                            Id = 20,
                            LookupId = 3,
                            Value = "گرم"
                        },
                        new
                        {
                            Id = 21,
                            LookupId = 3,
                            Value = "سی‌سی"
                        },
                        new
                        {
                            Id = 22,
                            LookupId = 3,
                            Value = "متر"
                        },
                        new
                        {
                            Id = 23,
                            LookupId = 3,
                            Value = "سانتی‌متر"
                        },
                        new
                        {
                            Id = 24,
                            LookupId = 3,
                            Value = "میلی‌متر"
                        },
                        new
                        {
                            Id = 25,
                            LookupId = 3,
                            Value = "اینچ"
                        },
                        new
                        {
                            Id = 26,
                            LookupId = 3,
                            Value = "سایر"
                        },
                        new
                        {
                            Id = 27,
                            LookupId = 4,
                            Value = "کاتالوگ"
                        },
                        new
                        {
                            Id = 28,
                            LookupId = 4,
                            Value = "بروشور"
                        },
                        new
                        {
                            Id = 29,
                            LookupId = 4,
                            Value = "لوگو"
                        },
                        new
                        {
                            Id = 30,
                            LookupId = 4,
                            Value = "پوستر"
                        },
                        new
                        {
                            Id = 31,
                            LookupId = 4,
                            Value = "کارت ویزیت"
                        },
                        new
                        {
                            Id = 32,
                            LookupId = 4,
                            Value = "سایر"
                        },
                        new
                        {
                            Id = 33,
                            LookupId = 5,
                            Value = "بنر"
                        },
                        new
                        {
                            Id = 34,
                            LookupId = 5,
                            Value = "بیلبورد"
                        },
                        new
                        {
                            Id = 35,
                            LookupId = 5,
                            Value = "مش"
                        },
                        new
                        {
                            Id = 36,
                            LookupId = 5,
                            Value = "رول‌آپ"
                        },
                        new
                        {
                            Id = 37,
                            LookupId = 5,
                            Value = "پرچم"
                        },
                        new
                        {
                            Id = 38,
                            LookupId = 5,
                            Value = "شاسی"
                        },
                        new
                        {
                            Id = 39,
                            LookupId = 5,
                            Value = "سایر"
                        },
                        new
                        {
                            Id = 40,
                            LookupId = 6,
                            Value = "مقاله"
                        },
                        new
                        {
                            Id = 41,
                            LookupId = 6,
                            Value = "خبر"
                        },
                        new
                        {
                            Id = 42,
                            LookupId = 6,
                            Value = "صفحه محصول"
                        },
                        new
                        {
                            Id = 43,
                            LookupId = 6,
                            Value = "سایر"
                        });
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.MiscellaneousDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("MiscellaneousDetails");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.PackagingPhotoDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("PackagingPhotoDetails");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.PromotionalItemDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.ToTable("PromotionalItemDetails");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.PromotionalVideoDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("PromotionalVideoDetails");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApproverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesignerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("DesignerId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.RequestHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewStatus")
                        .HasColumnType("int");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestHistories");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.RequestView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId", "RequestId")
                        .IsUnique();

                    b.ToTable("RequestViews");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            SettingKey = "MaxNormalRequestsPerDay",
                            SettingValue = "5"
                        },
                        new
                        {
                            Id = 3,
                            SettingKey = "MaxUrgentRequestsPerDay",
                            SettingValue = "2"
                        },
                        new
                        {
                            Id = 4,
                            SettingKey = "OrderableDaysInFuture",
                            SettingValue = "30"
                        },
                        new
                        {
                            Id = 5,
                            SettingKey = "DefaultDesignerId",
                            SettingValue = "b5fc3c65-9d43-4558-bb11-dd82eba9149d"
                        });
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.VisualAdDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("AdTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("VisualAdDetails");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.WebsiteContentDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("WebsiteContentDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Attachment", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.RequestHistory", "RequestHistory")
                        .WithMany()
                        .HasForeignKey("RequestHistoryId");

                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("RequestHistory");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Comment", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.DesignerNote", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", "Designer")
                        .WithMany()
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designer");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.EnvironmentalAdDetail", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.FileEditDetail", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.InboxView", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.InstagramPostDetail", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.LabelRequestDetail", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.LookupItem", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Lookup", "Lookup")
                        .WithMany()
                        .HasForeignKey("LookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lookup");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.MiscellaneousDetail", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Notification", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.PackagingPhotoDetail", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.PromotionalItemDetail", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.PromotionalVideoDetail", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.Request", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", "Designer")
                        .WithMany()
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GraphicRequestSystem.API.Core.Entities.LookupItem", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Designer");

                    b.Navigation("RequestType");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.RequestHistory", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.RequestView", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.VisualAdDetail", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GraphicRequestSystem.API.Core.Entities.WebsiteContentDetail", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GraphicRequestSystem.API.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
